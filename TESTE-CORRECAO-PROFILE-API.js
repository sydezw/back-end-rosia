// TESTE DA CORRE√á√ÉO DO PROFILE-API.TS
// Execute este script no console do frontend para testar a corre√ß√£o

(function() {
  console.log('üß™ TESTE DA CORRE√á√ÉO DO PROFILE-API.TS');
  console.log('=' .repeat(50));
  
  // ========================================
  // 1. VERIFICAR TOKEN ATUAL
  // ========================================
  console.log('\nüîç 1. VERIFICANDO TOKEN ATUAL...');
  
  const token = localStorage.getItem('access_token') || localStorage.getItem('auth_token');
  
  if (!token) {
    console.log('‚ùå Nenhum token encontrado!');
    console.log('üí° Fa√ßa login primeiro');
    return;
  }
  
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    console.log('‚úÖ Token decodificado:');
    console.log('   - Provider:', payload.provider);
    console.log('   - Email:', payload.email);
    console.log('   - Google User ID:', payload.googleUserId);
    console.log('   - √â Google?', payload.provider === 'google-separated');
    
    if (payload.provider !== 'google-separated') {
      console.log('‚ö†Ô∏è Token n√£o √© de usu√°rio Google!');
      console.log('üí° Este teste √© espec√≠fico para usu√°rios Google');
      return;
    }
    
  } catch (error) {
    console.log('‚ùå Erro ao decodificar token:', error);
    return;
  }
  
  // ========================================
  // 2. TESTAR DETEC√á√ÉO DE USU√ÅRIO GOOGLE
  // ========================================
  console.log('\nüîç 2. TESTANDO DETEC√á√ÉO DE USU√ÅRIO GOOGLE...');
  
  // Simular a fun√ß√£o isGoogleUserToken corrigida
  window.testGoogleUserDetection = function(user) {
    try {
      // Primeiro, verificar app_metadata do Supabase
      const provider = user?.app_metadata?.provider;
      console.log('üîç Provider do usu√°rio (app_metadata):', provider);
      
      // Verificar se √© usu√°rio Google pelo app_metadata
      let isGoogle = provider === 'google' || provider === 'google-separated';
      
      // Se n√£o encontrou no app_metadata, verificar no localStorage
      if (!isGoogle) {
        console.log('üîç Verificando token JWT no localStorage...');
        
        const token = localStorage.getItem('access_token') || localStorage.getItem('auth_token');
        
        if (token) {
          try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            console.log('üîç Payload do token JWT:', payload);
            
            const jwtProvider = payload.provider;
            console.log('üîç Provider do JWT:', jwtProvider);
            
            isGoogle = jwtProvider === 'google-separated';
            console.log('üîç √â usu√°rio Google pelo JWT?', isGoogle);
          } catch (jwtError) {
            console.log('‚ö†Ô∏è Erro ao decodificar JWT:', jwtError);
          }
        }
      }
      
      console.log('üîç Resultado final - √â usu√°rio Google?', isGoogle);
      return isGoogle;
    } catch (error) {
      console.error('Erro ao verificar token Google:', error);
      return false;
    }
  };
  
  // Testar com usu√°rio mock
  const mockUser = {
    email: 'schoolts965@gmail.com',
    app_metadata: {
      provider: 'google' // Pode n√£o ter este campo
    }
  };
  
  console.log('üß™ Testando detec√ß√£o com usu√°rio mock...');
  const isDetectedAsGoogle = window.testGoogleUserDetection(mockUser);
  
  if (isDetectedAsGoogle) {
    console.log('‚úÖ SUCESSO: Usu√°rio detectado como Google!');
    console.log('‚úÖ Endpoint que ser√° usado: /api/google-users/profile-update');
  } else {
    console.log('‚ùå FALHA: Usu√°rio N√ÉO detectado como Google!');
    console.log('‚ùå Endpoint que ser√° usado: /api/users/profile-update');
  }
  
  // ========================================
  // 3. TESTAR REQUISI√á√ÉO REAL
  // ========================================
  console.log('\nüîç 3. TESTANDO REQUISI√á√ÉO REAL...');
  
  window.testProfileUpdate = async function() {
    console.log('üì° Iniciando teste de atualiza√ß√£o de perfil...');
    
    try {
      const token = localStorage.getItem('access_token') || localStorage.getItem('auth_token');
      
      if (!token) {
        throw new Error('Token n√£o encontrado');
      }
      
      // Verificar se √© usu√°rio Google
      const payload = JSON.parse(atob(token.split('.')[1]));
      const isGoogle = payload.provider === 'google-separated';
      
      // Escolher endpoint correto
      const endpoint = isGoogle 
        ? 'http://localhost:3030/api/google-users/profile-update'
        : 'http://localhost:3030/api/users/profile-update';
      
      console.log('üì° Endpoint escolhido:', endpoint);
      console.log('üîç Tipo de usu√°rio:', isGoogle ? 'Google' : 'Normal');
      
      // Dados de teste
      const testData = {
        profile: {
          nome: 'Eduardo Teste',
          telefone: '11999999999'
        },
        address: {
          cep: '01310100',
          logradouro: 'Avenida Paulista'
        }
      };
      
      console.log('üì¶ Dados de teste:', testData);
      
      // Fazer requisi√ß√£o
      const response = await fetch(endpoint, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(testData)
      });
      
      console.log('üìä Status da resposta:', response.status);
      
      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ SUCESSO: Perfil atualizado!');
        console.log('üì¶ Resultado:', result);
      } else {
        const errorData = await response.text();
        console.log('‚ùå ERRO na requisi√ß√£o:');
        console.log('   - Status:', response.status);
        console.log('   - Resposta:', errorData);
        
        if (response.status === 400) {
          console.log('üí° Erro 400: Verifique os dados enviados');
        } else if (response.status === 401) {
          console.log('üí° Erro 401: Token inv√°lido ou endpoint errado');
        }
      }
      
    } catch (error) {
      console.log('‚ùå Erro no teste:', error);
    }
  };
  
  // ========================================
  // 4. RESUMO E INSTRU√á√ïES
  // ========================================
  console.log('\nüéâ TESTE CONFIGURADO!');
  console.log('=' .repeat(30));
  console.log('‚úÖ Fun√ß√£o de detec√ß√£o testada');
  console.log('‚úÖ Fun√ß√£o de teste criada');
  
  console.log('\nüìã FUN√á√ïES DISPON√çVEIS:');
  console.log('- window.testGoogleUserDetection(user) - Testar detec√ß√£o');
  console.log('- window.testProfileUpdate() - Testar requisi√ß√£o real');
  
  console.log('\nüîÑ PR√ìXIMOS PASSOS:');
  console.log('1. Execute: window.testProfileUpdate()');
  console.log('2. Verifique se o endpoint correto √© usado');
  console.log('3. Confirme se n√£o h√° mais erro 400/401');
  
  console.log('\nüí° CORRE√á√ÉO APLICADA:');
  console.log('- profile-api.ts agora verifica o token JWT');
  console.log('- Detec√ß√£o de usu√°rio Google corrigida');
  console.log('- Endpoint correto ser√° usado automaticamente');
  
  // Executar teste autom√°tico
  console.log('\nüöÄ EXECUTANDO TESTE AUTOM√ÅTICO...');
  setTimeout(() => {
    window.testProfileUpdate();
  }, 1000);
  
})();

// ==========================================
// INSTRU√á√ïES DE USO:
// ==========================================
// 
// 1. Abra o console do frontend (F12 > Console)
// 2. Cole e execute este script
// 3. Aguarde o teste autom√°tico
// 4. Se necess√°rio, execute: window.testProfileUpdate()
// 
// RESULTADO ESPERADO:
// - Detec√ß√£o: "√â usu√°rio Google? true"
// - Endpoint: "/api/google-users/profile-update"
// - Status: 200 OK (sem erro 400/401)