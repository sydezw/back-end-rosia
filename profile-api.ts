import { supabase } from './config/supabase.js';

// Fun√ß√£o para verificar se o token √© de usu√°rio Google
const isGoogleUserToken = (user: any): boolean => {
  try {
    // Primeiro, verificar app_metadata do Supabase
    const provider = user?.app_metadata?.provider;
    console.log('üîç Provider do usu√°rio (app_metadata):', provider);
    console.log('üîç App metadata completo:', user?.app_metadata);
    
    // Verificar se √© usu√°rio Google pelo app_metadata
    let isGoogle = provider === 'google' || provider === 'google-separated';
    
    // Se n√£o encontrou no app_metadata, verificar no localStorage
    if (!isGoogle) {
      console.log('üîç Verificando token JWT no localStorage...');
      
      const token = localStorage.getItem('access_token') || localStorage.getItem('auth_token');
      
      if (token) {
        try {
          const payload = JSON.parse(atob(token.split('.')[1]));
          console.log('üîç Payload do token JWT:', payload);
          
          const jwtProvider = payload.provider;
          console.log('üîç Provider do JWT:', jwtProvider);
          
          isGoogle = jwtProvider === 'google-separated';
          console.log('üîç √â usu√°rio Google pelo JWT?', isGoogle);
        } catch (jwtError) {
          console.log('‚ö†Ô∏è Erro ao decodificar JWT:', jwtError);
        }
      }
    }
    
    console.log('üîç Resultado final - √â usu√°rio Google?', isGoogle);
    return isGoogle;
  } catch (error) {
    console.error('Erro ao verificar token Google:', error);
    return false;
  }
}

// Fun√ß√£o para atualizar perfil completo (perfil + endere√ßo) - detecta automaticamente o tipo
export const updateUserProfile = async (profileData: any, addressData: any = null): Promise<any> => {
  console.log('üîç updateUserProfile - Iniciando atualiza√ß√£o de perfil');
  
  try {
    // Verificar se o usu√°rio est√° autenticado
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      console.error('‚ùå Usu√°rio n√£o autenticado:', authError);
      throw new Error('Usu√°rio n√£o autenticado');
    }
    
    // Obter a sess√£o e o token de acesso
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError || !session?.access_token) {
      console.error('‚ùå Erro ao obter sess√£o:', sessionError);
      throw new Error('Sess√£o inv√°lida');
    }
    
    console.log('‚úÖ Usu√°rio autenticado:', user.email);
    console.log('‚úÖ Token obtido com sucesso');
    
    // Detectar se √© usu√°rio Google
    let isGoogleUser = isGoogleUserToken(user);
    console.log('üîç Detec√ß√£o inicial - Tipo de usu√°rio:', isGoogleUser ? 'Google' : 'Normal');
    console.log('üîç User ID do Supabase:', user?.id);
    console.log('üîç Email do usu√°rio:', user?.email);
    
    // FOR√áAR detec√ß√£o como Google para este usu√°rio espec√≠fico (tempor√°rio para debug)
    if (user?.email === 'schoolts965@gmail.com') {
      console.log('üîç FOR√áANDO detec√ß√£o como usu√°rio Google para schoolts965@gmail.com');
      isGoogleUser = true;
    }
    
    // Se a detec√ß√£o por token falhou, verificar diretamente no banco
    if (!isGoogleUser && user?.id) {
      console.log('üîç Verificando no banco se usu√°rio √© Google...');
      try {
        const checkResponse = await fetch(`http://localhost:3030/api/google-users/profile`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${session.access_token}`
          }
        });
        
        if (checkResponse.ok) {
          console.log('‚úÖ Usu√°rio encontrado na tabela Google');
          isGoogleUser = true;
        } else {
          console.log('‚ùå Usu√°rio n√£o encontrado na tabela Google');
        }
      } catch (error) {
        console.log('‚ùå Erro ao verificar tabela Google:', error);
      }
    }
    
    console.log('üîç Detec√ß√£o final - Tipo de usu√°rio:', isGoogleUser ? 'Google' : 'Normal');
    
    // Preparar dados da requisi√ß√£o baseado no tipo de usu√°rio
    let requestData: any;
    let endpoint: string;
    
    if (isGoogleUser) {
      // Para usu√°rios Google, usar o formato esperado pelo GoogleUsersController
      endpoint = 'http://localhost:3030/api/google-users/profile-update';
      requestData = {
        profile: profileData || {},
        address: addressData || {}
      };
      console.log('üîç Usando endpoint Google:', endpoint);
    } else {
      // Para usu√°rios normais, usar o formato esperado pelo UsersController
      endpoint = 'http://localhost:3030/api/users/profile-update';
      requestData = {};
      
      // Adicionar dados do perfil se fornecidos
      if (profileData) {
        if (profileData.nome) requestData.nome = profileData.nome;
        if (profileData.cpf) requestData.cpf = profileData.cpf;
        if (profileData.telefone) requestData.telefone = profileData.telefone;
        if (profileData.data_nascimento) requestData.data_nascimento = profileData.data_nascimento;
      }
      
      // Adicionar dados do endere√ßo se fornecidos
      if (addressData) {
        if (addressData.nome_endereco) requestData.nome_endereco = addressData.nome_endereco;
        if (addressData.cep) requestData.cep = addressData.cep;
        if (addressData.logradouro) requestData.logradouro = addressData.logradouro;
        if (addressData.numero) requestData.numero = addressData.numero;
        if (addressData.bairro) requestData.bairro = addressData.bairro;
        if (addressData.cidade) requestData.cidade = addressData.cidade;
        if (addressData.estado) requestData.estado = addressData.estado;
        if (addressData.complemento) requestData.complemento = addressData.complemento;
      }
      
      console.log('üîç Usando endpoint normal:', endpoint);
    }
    
    console.log('üì§ Dados da requisi√ß√£o:', requestData);
    
    // Fazer a requisi√ß√£o
    const response = await fetch(endpoint, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.access_token}`
      },
      body: JSON.stringify(requestData)
    });
    
    console.log('üì• Status da resposta:', response.status);
    
    if (!response.ok) {
      const errorData = await response.json();
      console.error('‚ùå Erro na resposta:', errorData);
      throw new Error(`HTTP ${response.status}: ${JSON.stringify(errorData)}`);
    }
    
    const data = await response.json();
    console.log('‚úÖ Resposta recebida:', data);
    
    // Retornar formato padronizado
    return {
      success: true,
      user: isGoogleUser ? data.profile : data.data?.user,
      address: isGoogleUser ? data.address : data.data?.address,
      updated: data.data?.updated,
      message: data.message || 'Perfil atualizado com sucesso'
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar perfil:', error);
    throw error;
  }
};

// Fun√ß√£o para obter perfil do usu√°rio
export const getUserProfile = async (): Promise<any> => {
  console.log('üîç getUserProfile - Obtendo perfil do usu√°rio');
  
  try {
    // Verificar se o usu√°rio est√° autenticado
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      console.error('‚ùå Usu√°rio n√£o autenticado:', authError);
      throw new Error('Usu√°rio n√£o autenticado');
    }
    
    // Obter a sess√£o e o token de acesso
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError || !session?.access_token) {
      console.error('‚ùå Erro ao obter sess√£o:', sessionError);
      throw new Error('Sess√£o inv√°lida');
    }
    
    // Detectar se √© usu√°rio Google
    const isGoogleUser = isGoogleUserToken(user);
    const endpoint = isGoogleUser 
      ? 'http://localhost:3030/api/google-users/profile'
      : 'http://localhost:3030/api/users/profile';
    
    console.log('üîç Usando endpoint:', endpoint);
    
    // Fazer a requisi√ß√£o
    const response = await fetch(endpoint, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.access_token}`
      }
    });
    
    console.log('üì• Status da resposta:', response.status);
    
    if (!response.ok) {
      const errorData = await response.json();
      console.error('‚ùå Erro na resposta:', errorData);
      throw new Error(`HTTP ${response.status}: ${JSON.stringify(errorData)}`);
    }
    
    const data = await response.json();
    console.log('‚úÖ Perfil obtido:', data);
    
    return data;
    
  } catch (error) {
    console.error('‚ùå Erro ao obter perfil:', error);
    throw error;
  }
};

export default {
  updateUserProfile,
  getUserProfile
};