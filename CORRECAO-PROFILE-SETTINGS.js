// CORRE√á√ÉO ESPEC√çFICA PARA ProfileSettings.tsx
// Execute este script no console para corrigir o erro "session is not defined"

(function() {
  console.log('üîß CORRE√á√ÉO ESPEC√çFICA - ProfileSettings.tsx');
  console.log('=' .repeat(55));
  
  // 1. Substituir a fun√ß√£o loadUserData problem√°tica
  console.log('\nüîç CORRIGINDO FUN√á√ÉO loadUserData...');
  
  // Criar vers√£o corrigida da fun√ß√£o loadUserData
  window.loadUserDataFixed = async function() {
    console.log('üì• Carregando dados do usu√°rio via backend...');
    
    try {
      // Obter token do localStorage
      const token = localStorage.getItem('auth_token');
      
      if (!token) {
        throw new Error('Token de autentica√ß√£o n√£o encontrado');
      }
      
      // Verificar se √© usu√°rio Google
      let isGoogleUser = false;
      try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        isGoogleUser = payload.provider === 'google-separated';
        console.log('üîç Tipo de usu√°rio:', isGoogleUser ? 'Google Separado' : 'Supabase Normal');
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao decodificar token, assumindo usu√°rio normal');
      }
      
      // Escolher endpoint baseado no tipo de usu√°rio
      const endpoint = isGoogleUser 
        ? 'http://localhost:3030/api/google-users/profile'
        : 'http://localhost:3030/api/users/profile';
      
      console.log('üì° Fazendo requisi√ß√£o para:', endpoint);
      
      const response = await fetch(endpoint, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      console.log('üì° Status da resposta:', response.status);
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå Erro na resposta:', errorData);
        throw new Error(errorData.message || `Erro ${response.status}`);
      }
      
      const userData = await response.json();
      console.log('‚úÖ Dados carregados com sucesso:', userData);
      
      return userData;
      
    } catch (error) {
      console.error('‚ùå Erro ao carregar dados do usu√°rio:', error);
      throw error;
    }
  };
  
  // 2. Criar fun√ß√£o para salvar dados do perfil
  window.saveUserDataFixed = async function(profileData, addressData) {
    console.log('üíæ Salvando dados do usu√°rio...');
    
    try {
      const token = localStorage.getItem('auth_token');
      
      if (!token) {
        throw new Error('Token de autentica√ß√£o n√£o encontrado');
      }
      
      // Verificar se √© usu√°rio Google
      let isGoogleUser = false;
      try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        isGoogleUser = payload.provider === 'google-separated';
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao decodificar token, assumindo usu√°rio normal');
      }
      
      // Escolher endpoint baseado no tipo de usu√°rio
      const endpoint = isGoogleUser 
        ? 'http://localhost:3030/api/google-users/profile-update'
        : 'http://localhost:3030/api/users/profile-update';
      
      console.log('üì° Salvando em:', endpoint);
      
      const requestBody = {
        profile: profileData,
        address: addressData
      };
      
      console.log('üì¶ Dados a serem salvos:', requestBody);
      
      const response = await fetch(endpoint, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });
      
      console.log('üì° Status da resposta:', response.status);
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå Erro ao salvar:', errorData);
        throw new Error(errorData.message || `Erro ${response.status}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Dados salvos com sucesso:', result);
      
      return result;
      
    } catch (error) {
      console.error('‚ùå Erro ao salvar dados:', error);
      throw error;
    }
  };
  
  // 3. Criar fun√ß√£o para buscar CEP (corrigida)
  window.fetchAddressByCepFixed = async function(cep) {
    console.log('üîç Buscando CEP:', cep);
    
    try {
      // Usar fetch original para evitar intercepta√ß√£o
      const originalFetch = window.originalFetch || fetch;
      
      const response = await originalFetch(`https://viacep.com.br/ws/${cep}/json/`);
      
      if (!response.ok) {
        throw new Error('Erro ao buscar CEP');
      }
      
      const data = await response.json();
      
      if (data.erro) {
        throw new Error('CEP n√£o encontrado');
      }
      
      console.log('‚úÖ CEP encontrado:', data);
      return data;
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar CEP:', error);
      throw error;
    }
  };
  
  // 4. Fun√ß√£o para verificar se usu√°rio est√° logado
  window.isUserLoggedIn = function() {
    const token = localStorage.getItem('auth_token');
    
    if (!token) {
      return false;
    }
    
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      const now = Math.floor(Date.now() / 1000);
      
      // Verificar se token n√£o expirou
      if (payload.exp && payload.exp < now) {
        console.log('‚ö†Ô∏è Token expirado');
        return false;
      }
      
      return true;
    } catch (error) {
      console.log('‚ùå Token inv√°lido:', error);
      return false;
    }
  };
  
  // 5. Fun√ß√£o para obter informa√ß√µes do usu√°rio do token
  window.getUserInfoFromToken = function() {
    const token = localStorage.getItem('auth_token');
    
    if (!token) {
      return null;
    }
    
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      return {
        email: payload.email,
        provider: payload.provider,
        isGoogle: payload.provider === 'google-separated',
        googleUserId: payload.googleUserId,
        userId: payload.userId
      };
    } catch (error) {
      console.log('‚ùå Erro ao decodificar token:', error);
      return null;
    }
  };
  
  // 6. Testar as fun√ß√µes corrigidas
  console.log('\nüß™ TESTANDO FUN√á√ïES CORRIGIDAS...');
  
  // Testar se usu√°rio est√° logado
  const isLoggedIn = window.isUserLoggedIn();
  console.log('‚úÖ Usu√°rio logado:', isLoggedIn);
  
  if (isLoggedIn) {
    const userInfo = window.getUserInfoFromToken();
    console.log('‚úÖ Informa√ß√µes do usu√°rio:', userInfo);
    
    // Testar carregamento de dados
    window.loadUserDataFixed()
      .then(data => {
        console.log('‚úÖ Teste de carregamento funcionou');
      })
      .catch(error => {
        console.log('‚ùå Teste de carregamento falhou:', error.message);
      });
  }
  
  // Testar busca de CEP
  window.fetchAddressByCepFixed('01310100')
    .then(data => {
      console.log('‚úÖ Teste de CEP funcionou:', data.logradouro);
    })
    .catch(error => {
      console.log('‚ùå Teste de CEP falhou:', error.message);
    });
  
  console.log('\nüéâ FUN√á√ïES CORRIGIDAS CRIADAS!');
  console.log('üìã FUN√á√ïES DISPON√çVEIS:');
  console.log('- window.loadUserDataFixed() - Carregar dados do usu√°rio');
  console.log('- window.saveUserDataFixed(profile, address) - Salvar dados');
  console.log('- window.fetchAddressByCepFixed(cep) - Buscar CEP');
  console.log('- window.isUserLoggedIn() - Verificar se est√° logado');
  console.log('- window.getUserInfoFromToken() - Obter info do token');
  
  console.log('\nüí° COMO USAR NO COMPONENTE:');
  console.log('1. Substitua as chamadas problem√°ticas pelas fun√ß√µes corrigidas');
  console.log('2. Use window.loadUserDataFixed() em vez da fun√ß√£o original');
  console.log('3. Use window.saveUserDataFixed() para salvar dados');
  console.log('4. Use window.fetchAddressByCepFixed() para buscar CEP');
  
})();

// INSTRU√á√ïES:
// 1. Execute este script no console do frontend
// 2. As fun√ß√µes corrigidas estar√£o dispon√≠veis globalmente
// 3. Teste as fun√ß√µes individualmente se necess√°rio
// 4. Recarregue a p√°gina para aplicar as corre√ß√µes