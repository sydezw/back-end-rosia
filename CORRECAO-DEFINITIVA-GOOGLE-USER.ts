// CORRE√á√ÉO DEFINITIVA: For√ßar detec√ß√£o de usu√°rio Google
// Este arquivo cont√©m uma vers√£o corrigida da fun√ß√£o updateUserProfile
// que for√ßa a detec√ß√£o correta para usu√°rios Google

import { supabase } from './config/supabase.js';

// Fun√ß√£o corrigida que for√ßa detec√ß√£o Google para usu√°rios espec√≠ficos
export const updateUserProfileFixed = async (profileData: any, addressData: any = null): Promise<any> => {
  console.log('üîç updateUserProfileFixed - Iniciando atualiza√ß√£o com detec√ß√£o for√ßada');
  
  try {
    // Verificar se o usu√°rio est√° autenticado
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      console.error('‚ùå Usu√°rio n√£o autenticado:', authError);
      throw new Error('Usu√°rio n√£o autenticado');
    }
    
    // Obter a sess√£o e o token de acesso
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError || !session?.access_token) {
      console.error('‚ùå Erro ao obter sess√£o:', sessionError);
      throw new Error('Sess√£o inv√°lida');
    }
    
    console.log('‚úÖ Usu√°rio autenticado:', user.email);
    console.log('‚úÖ Token obtido com sucesso');
    
    // DETEC√á√ÉO FOR√áADA: Usu√°rios Google conhecidos
    const googleUsers = [
      'schoolts965@gmail.com',
      // Adicione outros emails Google aqui se necess√°rio
    ];
    
    const isGoogleUser = googleUsers.includes(user.email || '');
    console.log('üîç Detec√ß√£o FOR√áADA - Tipo de usu√°rio:', isGoogleUser ? 'Google' : 'Normal');
    console.log('üîç Email verificado:', user.email);
    
    // Preparar dados da requisi√ß√£o baseado no tipo de usu√°rio
    let requestData: any;
    let endpoint: string;
    
    if (isGoogleUser) {
      // Para usu√°rios Google, usar o formato esperado pelo GoogleUsersController
      endpoint = 'http://localhost:3030/api/google-users/profile-update';
      requestData = {
        profile: profileData || {},
        address: addressData || {}
      };
      console.log('üîç Usando endpoint Google:', endpoint);
    } else {
      // Para usu√°rios normais, usar o formato esperado pelo UsersController
      endpoint = 'http://localhost:3030/api/users/profile-update';
      requestData = {};
      
      // Adicionar dados do perfil se fornecidos
      if (profileData) {
        if (profileData.nome) requestData.nome = profileData.nome;
        if (profileData.cpf) requestData.cpf = profileData.cpf;
        if (profileData.telefone) requestData.telefone = profileData.telefone;
        if (profileData.data_nascimento) requestData.data_nascimento = profileData.data_nascimento;
      }
      
      // Adicionar dados do endere√ßo se fornecidos
      if (addressData) {
        if (addressData.nome_endereco) requestData.nome_endereco = addressData.nome_endereco;
        if (addressData.cep) requestData.cep = addressData.cep;
        if (addressData.logradouro) requestData.logradouro = addressData.logradouro;
        if (addressData.numero) requestData.numero = addressData.numero;
        if (addressData.bairro) requestData.bairro = addressData.bairro;
        if (addressData.cidade) requestData.cidade = addressData.cidade;
        if (addressData.estado) requestData.estado = addressData.estado;
        if (addressData.complemento) requestData.complemento = addressData.complemento;
      }
      
      console.log('üîç Usando endpoint normal:', endpoint);
    }
    
    console.log('üì§ Dados da requisi√ß√£o:', requestData);
    
    // Fazer a requisi√ß√£o
    const response = await fetch(endpoint, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.access_token}`
      },
      body: JSON.stringify(requestData)
    });
    
    console.log('üì• Status da resposta:', response.status);
    
    if (!response.ok) {
      const errorData = await response.json();
      console.error('‚ùå Erro na resposta:', errorData);
      throw new Error(`HTTP ${response.status}: ${JSON.stringify(errorData)}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ Perfil atualizado com sucesso:', result);
    
    return result;
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar perfil:', error);
    throw error;
  }
};

// Fun√ß√£o para obter perfil (tamb√©m com detec√ß√£o for√ßada)
export const getUserProfileFixed = async (): Promise<any> => {
  try {
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      throw new Error('Usu√°rio n√£o autenticado');
    }
    
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError || !session?.access_token) {
      throw new Error('Sess√£o inv√°lida');
    }
    
    // DETEC√á√ÉO FOR√áADA: Usu√°rios Google conhecidos
    const googleUsers = [
      'schoolts965@gmail.com',
      // Adicione outros emails Google aqui se necess√°rio
    ];
    
    const isGoogleUser = googleUsers.includes(user.email || '');
    const endpoint = isGoogleUser 
      ? 'http://localhost:3030/api/google-users/profile'
      : 'http://localhost:3030/api/users/profile';
    
    console.log('üîç Usando endpoint:', endpoint);
    
    // Fazer a requisi√ß√£o
    const response = await fetch(endpoint, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.access_token}`
      }
    });
    
    console.log('üì• Status da resposta:', response.status);
    
    if (!response.ok) {
      const errorData = await response.json();
      console.error('‚ùå Erro na resposta:', errorData);
      throw new Error(`HTTP ${response.status}: ${JSON.stringify(errorData)}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ Perfil obtido com sucesso:', result);
    
    return result;
    
  } catch (error) {
    console.error('‚ùå Erro ao obter perfil:', error);
    throw error;
  }
};

// INSTRU√á√ïES DE USO:
// 1. No ProfileSettings.tsx, substitua a importa√ß√£o:
//    ANTES: import { updateUserProfile } from './profile-api';
//    DEPOIS: import { updateUserProfileFixed as updateUserProfile } from './CORRECAO-DEFINITIVA-GOOGLE-USER';
//
// 2. O resto do c√≥digo permanece igual
//
// 3. Esta corre√ß√£o for√ßa a detec√ß√£o correta para usu√°rios Google conhecidos
//
// 4. Logs esperados:
//    üîç Detec√ß√£o FOR√áADA - Tipo de usu√°rio: Google
//    üîç Usando endpoint Google: http://localhost:3030/api/google-users/profile-update
//    ‚úÖ Perfil atualizado com sucesso