// CORRE√á√ÉO FINAL PARA ERROS 401 DE USU√ÅRIOS INEXISTENTES NO FRONTEND
// Este arquivo cont√©m a solu√ß√£o completa para tratar usu√°rios que n√£o existem mais no sistema

/**
 * PROBLEMA IDENTIFICADO:
 * - Usu√°rio com ID 2c1f4048-b751-4493-a62d-0090fde82e53 n√£o existe no Auth do Supabase
 * - Frontend ainda possui token/sess√£o local deste usu√°rio inexistente
 * - Quando tenta fazer requisi√ß√µes, recebe 401 com mensagem "Usu√°rio n√£o encontrado"
 * 
 * SOLU√á√ÉO IMPLEMENTADA:
 * 1. Middleware backend melhorado com mensagens claras e c√≥digos espec√≠ficos
 * 2. Frontend deve interceptar erros 401 e limpar dados locais
 * 3. Redirecionamento autom√°tico para login quando usu√°rio n√£o existe
 */

// ============================================================================
// 1. INTERCEPTADOR DE ERROS PARA O FRONTEND (endpoint-interceptor.ts)
// ============================================================================

const FRONTEND_ERROR_INTERCEPTOR = `
// Adicionar ao endpoint-interceptor.ts

// Fun√ß√£o para limpar dados de usu√°rio inexistente
function clearInvalidUserData() {
  console.log('üßπ Limpando dados de usu√°rio inexistente...');
  
  // Limpar localStorage
  localStorage.removeItem('supabase.auth.token');
  localStorage.removeItem('user');
  localStorage.removeItem('userProfile');
  localStorage.removeItem('authToken');
  
  // Limpar sessionStorage
  sessionStorage.removeItem('supabase.auth.token');
  sessionStorage.removeItem('user');
  sessionStorage.removeItem('userProfile');
  
  // Limpar cookies se houver
  document.cookie.split(";").forEach(function(c) { 
    document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); 
  });
  
  console.log('‚úÖ Dados locais limpos');
}

// Fun√ß√£o para redirecionar para login
function redirectToLogin(reason = 'Sess√£o expirada') {
  console.log('üîÑ Redirecionando para login:', reason);
  
  // Mostrar notifica√ß√£o ao usu√°rio
  if (typeof window !== 'undefined' && window.alert) {
    alert(\`Sua sess√£o expirou ou sua conta n√£o foi encontrada. Voc√™ ser√° redirecionado para o login.\\n\\nMotivo: \${reason}\`);
  }
  
  // Redirecionar para p√°gina de login
  if (typeof window !== 'undefined') {
    window.location.href = '/login';
  }
}

// Interceptador melhorado para erros 401
const originalFetch = window.fetch;
window.fetch = async function(...args) {
  try {
    const response = await originalFetch.apply(this, args);
    
    // Interceptar erros 401
    if (response.status === 401) {
      const responseData = await response.clone().json().catch(() => ({}));
      
      console.log('üö® Erro 401 interceptado:', responseData);
      
      // Verificar se √© erro de usu√°rio n√£o encontrado
      if (responseData.code === 'USER_NOT_FOUND' || 
          responseData.message?.includes('Usu√°rio n√£o encontrado') ||
          responseData.message?.includes('n√£o foi encontrado')) {
        
        console.log('‚ùå Usu√°rio n√£o encontrado - limpando dados e redirecionando');
        
        clearInvalidUserData();
        redirectToLogin(responseData.message || 'Usu√°rio n√£o encontrado');
        
        return response;
      }
      
      // Verificar se √© erro de token expirado
      if (responseData.code === 'INVALID_GOOGLE_TOKEN_TYPE' ||
          responseData.message?.includes('Token inv√°lido') ||
          responseData.message?.includes('sess√£o expirada')) {
        
        console.log('üîë Token inv√°lido - limpando dados e redirecionando');
        
        clearInvalidUserData();
        redirectToLogin(responseData.message || 'Token inv√°lido');
        
        return response;
      }
    }
    
    return response;
    
  } catch (error) {
    console.error('‚ùå Erro no interceptador:', error);
    throw error;
  }
};

console.log('‚úÖ Interceptador de erros 401 ativado');
`;

// ============================================================================
// 2. MELHORIAS PARA google-user-profile-api.ts
// ============================================================================

const FRONTEND_API_IMPROVEMENTS = `
// Melhorias para google-user-profile-api.ts

// Fun√ß√£o para verificar se usu√°rio existe antes de fazer requisi√ß√µes
async function checkUserExists() {
  try {
    const response = await fetch('/api/google-users/profile', {
      method: 'GET',
      headers: {
        'Authorization': \`Bearer \${getAuthToken()}\`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.status === 401) {
      const errorData = await response.json();
      
      if (errorData.code === 'USER_NOT_FOUND') {
        console.log('‚ùå Usu√°rio n√£o existe mais no sistema');
        return false;
      }
    }
    
    return response.ok;
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar usu√°rio:', error);
    return false;
  }
}

// Fun√ß√£o melhorada para updateUserProfile
export async function updateUserProfile(profileData) {
  console.log('üîÑ Iniciando atualiza√ß√£o de perfil...');
  
  try {
    // Verificar se usu√°rio existe antes de tentar atualizar
    const userExists = await checkUserExists();
    
    if (!userExists) {
      console.log('‚ùå Usu√°rio n√£o existe - n√£o √© poss√≠vel atualizar perfil');
      throw new Error('Usu√°rio n√£o encontrado no sistema. Fa√ßa login novamente.');
    }
    
    // Continuar com a atualiza√ß√£o normal...
    const response = await fetch(endpoint, {
      method: 'PUT',
      headers: {
        'Authorization': \`Bearer \${token}\`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestData)
    });
    
    // Tratar resposta...
    if (!response.ok) {
      const errorData = await response.json();
      
      // Se ainda assim receber 401, limpar dados
      if (response.status === 401 && errorData.code === 'USER_NOT_FOUND') {
        clearInvalidUserData();
        redirectToLogin(errorData.message);
      }
      
      throw new Error(\`HTTP \${response.status}: \${JSON.stringify(errorData)}\`);
    }
    
    return await response.json();
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar perfil:', error);
    throw error;
  }
}
`;

// ============================================================================
// 3. VERIFICA√á√ÉO INICIAL NO APP
// ============================================================================

const APP_INITIALIZATION = `
// Adicionar ao App.tsx ou componente principal

// Fun√ß√£o para verificar integridade do usu√°rio na inicializa√ß√£o
async function checkUserIntegrity() {
  console.log('üîç Verificando integridade do usu√°rio...');
  
  const token = localStorage.getItem('supabase.auth.token') || 
                sessionStorage.getItem('supabase.auth.token');
  
  if (!token) {
    console.log('‚úÖ Nenhum token encontrado - usu√°rio n√£o logado');
    return true;
  }
  
  try {
    // Tentar fazer uma requisi√ß√£o simples para verificar se o usu√°rio existe
    const response = await fetch('/api/google-users/profile', {
      method: 'GET',
      headers: {
        'Authorization': \`Bearer \${token}\`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.status === 401) {
      const errorData = await response.json();
      
      if (errorData.code === 'USER_NOT_FOUND') {
        console.log('‚ùå Usu√°rio n√£o existe mais - limpando dados');
        clearInvalidUserData();
        return false;
      }
    }
    
    if (response.ok) {
      console.log('‚úÖ Usu√°rio v√°lido');
      return true;
    }
    
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o de integridade:', error);
  }
  
  return false;
}

// Chamar na inicializa√ß√£o do app
useEffect(() => {
  checkUserIntegrity().then(isValid => {
    if (!isValid) {
      // Redirecionar para login se usu√°rio inv√°lido
      navigate('/login');
    }
  });
}, []);
`;

// ============================================================================
// 4. INSTRU√á√ïES DE IMPLEMENTA√á√ÉO
// ============================================================================

console.log('üìã CORRE√á√ÉO FINAL PARA ERROS 401 DE USU√ÅRIOS INEXISTENTES');
console.log('===========================================================\n');

console.log('üîß IMPLEMENTA√á√ÉO NECESS√ÅRIA NO FRONTEND:\n');

console.log('1Ô∏è‚É£ ENDPOINT INTERCEPTOR:');
console.log('   - Adicionar interceptador de fetch para capturar erros 401');
console.log('   - Limpar dados locais quando usu√°rio n√£o encontrado');
console.log('   - Redirecionar automaticamente para login\n');

console.log('2Ô∏è‚É£ API FUNCTIONS:');
console.log('   - Verificar exist√™ncia do usu√°rio antes de opera√ß√µes');
console.log('   - Tratar erros 401 de forma elegante');
console.log('   - Fornecer feedback claro ao usu√°rio\n');

console.log('3Ô∏è‚É£ APP INITIALIZATION:');
console.log('   - Verificar integridade do usu√°rio na inicializa√ß√£o');
console.log('   - Limpar dados inv√°lidos automaticamente');
console.log('   - Prevenir erros futuros\n');

console.log('‚úÖ BACKEND J√Å CORRIGIDO:');
console.log('   - Middleware melhorado com mensagens claras');
console.log('   - C√≥digos de erro espec√≠ficos');
console.log('   - Tentativa de cria√ß√£o autom√°tica de perfil');
console.log('   - Sugest√µes de a√ß√£o para o frontend\n');

console.log('üéØ RESULTADO ESPERADO:');
console.log('   - Usu√°rios inexistentes s√£o detectados automaticamente');
console.log('   - Dados locais s√£o limpos automaticamente');
console.log('   - Redirecionamento suave para login');
console.log('   - Experi√™ncia do usu√°rio melhorada');
console.log('   - Fim dos erros 401 inesperados\n');

console.log('üí° PR√ìXIMOS PASSOS:');
console.log('   1. Implementar o interceptador no endpoint-interceptor.ts');
console.log('   2. Atualizar google-user-profile-api.ts com verifica√ß√µes');
console.log('   3. Adicionar verifica√ß√£o de integridade no App.tsx');
console.log('   4. Testar com usu√°rio problem√°tico');
console.log('   5. Verificar se redirecionamento funciona corretamente\n');

module.exports = {
  FRONTEND_ERROR_INTERCEPTOR,
  FRONTEND_API_IMPROVEMENTS,
  APP_INITIALIZATION
};