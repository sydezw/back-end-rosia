// VERIFICA√á√ÉO DO TOKEN GERADO - DIAGN√ìSTICO COMPLETO
// Cole este c√≥digo no console para verificar o token atual:

(function() {
  console.log('üîç DIAGN√ìSTICO COMPLETO DO TOKEN');
  console.log('================================');
  
  // 1. Verificar se existe token
  const token = localStorage.getItem('auth_token');
  if (!token) {
    console.error('‚ùå Nenhum token encontrado no localStorage');
    return;
  }
  
  console.log('‚úÖ Token encontrado no localStorage');
  console.log('üìè Tamanho do token:', token.length, 'caracteres');
  
  try {
    // 2. Decodificar o token JWT
    const parts = token.split('.');
    if (parts.length !== 3) {
      console.error('‚ùå Token JWT inv√°lido - n√£o tem 3 partes');
      return;
    }
    
    // 3. Decodificar header
    const header = JSON.parse(atob(parts[0]));
    console.log('üîß Header do JWT:', header);
    
    // 4. Decodificar payload
    const payload = JSON.parse(atob(parts[1]));
    console.log('üì¶ Payload completo do JWT:', payload);
    
    // 5. Verifica√ß√µes espec√≠ficas
    console.log('\nüîç VERIFICA√á√ïES ESPEC√çFICAS:');
    console.log('- Provider:', payload.provider || '‚ùå N√ÉO DEFINIDO');
    console.log('- Email:', payload.email || '‚ùå N√ÉO DEFINIDO');
    console.log('- User ID:', payload.userId || '‚ùå N√ÉO DEFINIDO');
    console.log('- Google ID:', payload.googleId || '‚ùå N√ÉO DEFINIDO');
    console.log('- Nome:', payload.name || '‚ùå N√ÉO DEFINIDO');
    
    // 6. Verificar expira√ß√£o
    if (payload.exp) {
      const expDate = new Date(payload.exp * 1000);
      const now = new Date();
      console.log('‚è∞ Expira em:', expDate.toLocaleString());
      console.log('‚è∞ Agora:', now.toLocaleString());
      console.log('‚è∞ Token v√°lido:', expDate > now ? '‚úÖ SIM' : '‚ùå EXPIRADO');
    }
    
    // 7. Verificar se √© token Google correto
    console.log('\nüéØ DIAGN√ìSTICO FINAL:');
    if (payload.provider === 'google-separated') {
      console.log('‚úÖ Provider CORRETO: google-separated');
    } else if (payload.provider === 'google') {
      console.log('‚ùå Provider INCORRETO: google (deveria ser google-separated)');
    } else {
      console.log('‚ùå Provider INV√ÅLIDO:', payload.provider);
    }
    
    // 8. Teste imediato do token
    console.log('\nüß™ TESTANDO TOKEN ATUAL...');
    fetch('http://localhost:3030/api/google-users/profile', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })
    .then(response => {
      console.log('üì° Status da requisi√ß√£o:', response.status);
      if (response.ok) {
        console.log('üéâ TOKEN FUNCIONANDO!');
        return response.json();
      } else {
        console.log('‚ùå TOKEN N√ÉO FUNCIONANDO');
        return response.json();
      }
    })
    .then(data => {
      console.log('üì• Resposta do servidor:', data);
    })
    .catch(error => {
      console.error('‚ùå Erro no teste:', error);
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao decodificar token:', error.message);
  }
})();

// INSTRU√á√ïES:
// 1. Cole este c√≥digo no console
// 2. Analise o resultado
// 3. Se o provider estiver errado, execute novamente o corrigirComDados
// 4. Se ainda n√£o funcionar, pode ser problema no backend