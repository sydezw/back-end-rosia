// CORRE√á√ÉO DO INTERCEPTADOR DE ENDPOINTS - PROBLEMA 401
// Execute este script no console do frontend para corrigir o redirecionamento

(function() {
  console.log('üîß CORRIGINDO INTERCEPTADOR DE ENDPOINTS');
  console.log('=' .repeat(50));
  
  // ========================================
  // PROBLEMA IDENTIFICADO:
  // ========================================
  console.log('\n‚ùå PROBLEMA IDENTIFICADO:');
  console.log('- Login Google funciona (status 200, token salvo)');
  console.log('- ProfileSettings faz requisi√ß√£o para /api/users/profile');
  console.log('- Deveria fazer para /api/google-users/profile');
  console.log('- Resultado: 401 Unauthorized');
  
  // ========================================
  // VERIFICAR TOKEN ATUAL
  // ========================================
  console.log('\nüîç VERIFICANDO TOKEN ATUAL...');
  
  const token = localStorage.getItem('access_token') || localStorage.getItem('auth_token');
  
  if (!token) {
    console.log('‚ùå Nenhum token encontrado!');
    return;
  }
  
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    console.log('‚úÖ Token decodificado:', {
      provider: payload.provider,
      email: payload.email,
      userId: payload.userId || payload.googleUserId,
      isGoogle: payload.provider === 'google-separated'
    });
    
    if (payload.provider !== 'google-separated') {
      console.log('‚ö†Ô∏è Token n√£o √© de usu√°rio Google separado!');
      return;
    }
    
  } catch (error) {
    console.log('‚ùå Erro ao decodificar token:', error);
    return;
  }
  
  // ========================================
  // CORRIGIR INTERCEPTADOR
  // ========================================
  console.log('\nüîß CORRIGINDO INTERCEPTADOR...');
  
  // Salvar fetch original
  if (!window.originalFetch) {
    window.originalFetch = window.fetch.bind(window);
    console.log('‚úÖ Fetch original salvo');
  }
  
  // Criar interceptador corrigido
  window.fetch = function(url, options = {}) {
    const urlString = typeof url === 'string' ? url : url.toString();
    
    // Verificar se √© requisi√ß√£o para backend da aplica√ß√£o
    const isBackendRequest = (
      urlString.includes('/api/users/profile') || 
      urlString.includes('/api/users/profile-update')
    ) && (
      urlString.includes('localhost') || 
      urlString.includes('back-end-rosia02.vercel.app')
    );
    
    if (isBackendRequest) {
      // Verificar se usu√°rio √© Google
      const currentToken = localStorage.getItem('access_token') || localStorage.getItem('auth_token');
      
      if (currentToken) {
        try {
          const payload = JSON.parse(atob(currentToken.split('.')[1]));
          
          if (payload.provider === 'google-separated') {
            // Redirecionar para endpoints Google
            let newUrl = urlString;
            
            if (urlString.includes('/api/users/profile-update')) {
              newUrl = urlString.replace('/api/users/profile-update', '/api/google-users/profile-update');
              console.log('üîÑ Redirecionando profile-update:', newUrl);
            } else if (urlString.includes('/api/users/profile')) {
              newUrl = urlString.replace('/api/users/profile', '/api/google-users/profile');
              console.log('üîÑ Redirecionando profile:', newUrl);
            }
            
            return window.originalFetch(newUrl, options);
          }
        } catch (error) {
          console.log('‚ö†Ô∏è Erro ao verificar token, usando URL original');
        }
      }
    }
    
    // Para todas as outras requisi√ß√µes, usar fetch original
    return window.originalFetch(url, options);
  };
  
  console.log('‚úÖ Interceptador corrigido!');
  
  // ========================================
  // TESTAR CORRE√á√ÉO
  // ========================================
  console.log('\nüß™ TESTANDO CORRE√á√ÉO...');
  
  // Teste 1: Verificar redirecionamento
  console.log('\nüì° Teste 1: Verificando redirecionamento...');
  
  const testUrl = 'http://localhost:3030/api/users/profile';
  console.log('URL original:', testUrl);
  
  // Simular requisi√ß√£o para ver redirecionamento
  fetch(testUrl, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    }
  })
  .then(response => {
    console.log('‚úÖ Teste 1 - Status:', response.status);
    if (response.status === 200) {
      console.log('‚úÖ Redirecionamento funcionando!');
      return response.json();
    } else {
      console.log('‚ö†Ô∏è Status n√£o √© 200, mas redirecionamento aplicado');
      return response.text();
    }
  })
  .then(data => {
    console.log('üì¶ Dados recebidos:', data);
  })
  .catch(error => {
    console.log('‚ùå Erro no teste:', error);
  });
  
  // ========================================
  // FUN√á√ÉO PARA RECARREGAR DADOS
  // ========================================
  console.log('\nüîÑ CRIANDO FUN√á√ÉO PARA RECARREGAR DADOS...');
  
  window.reloadProfileData = function() {
    console.log('üîÑ Recarregando dados do perfil...');
    
    const token = localStorage.getItem('access_token') || localStorage.getItem('auth_token');
    
    if (!token) {
      console.log('‚ùå Token n√£o encontrado');
      return;
    }
    
    // Fazer requisi√ß√£o direta para endpoint correto
    fetch('http://localhost:3030/api/google-users/profile', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    })
    .then(response => {
      console.log('üì° Status da requisi√ß√£o:', response.status);
      
      if (response.ok) {
        return response.json();
      } else {
        throw new Error(`Erro ${response.status}`);
      }
    })
    .then(data => {
      console.log('‚úÖ Dados do perfil carregados:', data);
      
      // Tentar atualizar a interface se poss√≠vel
      if (window.React && window.ReactDOM) {
        console.log('üîÑ Tentando atualizar interface...');
        // Disparar evento customizado para componentes React
        window.dispatchEvent(new CustomEvent('profileDataLoaded', { detail: data }));
      }
      
      return data;
    })
    .catch(error => {
      console.log('‚ùå Erro ao carregar dados:', error);
    });
  };
  
  // ========================================
  // RESUMO E INSTRU√á√ïES
  // ========================================
  console.log('\nüéâ CORRE√á√ÉO APLICADA!');
  console.log('=' .repeat(30));
  console.log('‚úÖ Interceptador corrigido');
  console.log('‚úÖ Redirecionamento autom√°tico ativo');
  console.log('‚úÖ Fun√ß√£o de teste criada');
  
  console.log('\nüìã FUN√á√ïES DISPON√çVEIS:');
  console.log('- window.reloadProfileData() - Recarregar dados do perfil');
  
  console.log('\nüîÑ PR√ìXIMOS PASSOS:');
  console.log('1. Execute: window.reloadProfileData()');
  console.log('2. Ou recarregue a p√°gina para aplicar corre√ß√£o');
  console.log('3. Teste o formul√°rio de perfil novamente');
  
  console.log('\nüí° EXPLICA√á√ÉO DO PROBLEMA:');
  console.log('- O login Google funcionava corretamente');
  console.log('- Mas o ProfileSettings usava endpoint errado');
  console.log('- /api/users/profile ‚Üí /api/google-users/profile');
  console.log('- Agora o interceptador redireciona automaticamente');
  
})();

// ==========================================
// INSTRU√á√ïES PARA O FRONTEND:
// ==========================================
// 
// PROBLEMA IDENTIFICADO:
// - Login Google funciona (token salvo corretamente)
// - ProfileSettings faz requisi√ß√£o para /api/users/profile
// - Deveria fazer para /api/google-users/profile
// - Resultado: 401 Unauthorized
// 
// SOLU√á√ÉO:
// 1. Execute este script no console
// 2. O interceptador ser√° corrigido automaticamente
// 3. Requisi√ß√µes ser√£o redirecionadas para endpoints corretos
// 
// ALTERNATIVA PERMANENTE:
// Modifique o endpoint-interceptor.ts para incluir:
// - Verifica√ß√£o do tipo de usu√°rio (Google vs Normal)
// - Redirecionamento autom√°tico baseado no provider do token
// - Manter compatibilidade com APIs externas (ViaCEP, etc)